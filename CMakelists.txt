cmake_minimum_required(VERSION 3.12)

###########################################
##	Project settings
###########################################
set(PROJECT_NAME "bare_FFeeT")

project(${PROJECT_NAME})
set(ExeName "bare_FFeeT")

###########################################
##	CONAN settings
###########################################

if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
	message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
	file(DOWNLOAD "https://raw.githubusercontent.com/conan-io/cmake-conan/master/conan.cmake" "${CMAKE_BINARY_DIR}/conan.cmake")
endif()

if(EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
	include(${CMAKE_BINARY_DIR}/conan.cmake)
	conan_add_remote(NAME bincrafters URL https://api.bintray.com/conan/bincrafters/public-conan)
	conan_cmake_run(CONANFILE conanfile.txt BUILD missing )
endif()

set(CONAN_BUILD_INFO "CONAN_BUILD_INFO-NOTFOUND")
find_file(CONAN_BUILD_INFO conanbuildinfo_multi.cmake NO_DEFAULT_PATH PATHS ${CMAKE_BINARY_DIR})

if(${CONAN_BUILD_INFO} STREQUAL "CONAN_BUILD_INFO-NOTFOUND")
	find_file(CONAN_BUILD_INFO conanbuildinfo.cmake NO_DEFAULT_PATH PATHS ${CMAKE_BINARY_DIR})
	if(NOT ${CONAN_BUILD_INFO} STREQUAL "CONAN_BUILD_INFO-NOTFOUND")
		set(USE_NOT_MULTI_CONAN_BUILD_INFO TRUE)

	endif()
endif()

	include(${CONAN_BUILD_INFO})

message(STATUS "which conanbuildinfo: ${CONAN_BUILD_INFO}")

if(USE_NOT_MULTI_CONAN_BUILD_INFO)
	conan_basic_setup(TARGETS NO_OUTPUT_DIRS)
message(STATUS "wTARGETS NO_OUTPUT_DIRS")
else()
	conan_basic_setup(TARGETS)
message(STATUS "TARGETS")
endif()

###########################################
##	PROJECT
###########################################
list(APPEND DATASOURCES

		"${CMAKE_SOURCE_DIR}/inc/datasources/bare_FFeeT.h"

)
					
if(MSVC)
	# f√ºr chaiscript
  add_definitions(/bigobj)
  
  #add_definitions(/bigobj /permissive- /Zc:twoPhase-)
  # Note on MSVC compiler flags.
  # The code base selective disables warnings as necessary when the compiler is complaining too much
  # about something that is perfectly valid, or there is simply no technical way around it
  # This particular warning, C4503 is in regards to the decorated names that MSVC generates internally.
  # The error did not come up until the move to C++11, but the compiler doesn't give enough information
  # to determine where the error is coming from, and the internet provides no real information for
  # how to workaround or fix the error. So I'm disabling it globally.
  #add_definitions(/wd4503)
else()
  add_definitions(-Wall -Wextra -Wconversion -Wshadow -Wnon-virtual-dtor -Wold-style-cast -Wcast-align -Wcast-qual -Wunused -Woverloaded-virtual -Wno-noexcept-type -Wpedantic ${CPP17_FLAG})

  if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    add_definitions(-Weverything -Wno-c++98-compat-pedantic  -Wno-c++98-compat -Wno-documentation -Wno-switch-enum -Wno-weak-vtables -Wno-missing-prototypes -Wno-padded -Wno-missing-noreturn -Wno-exit-time-destructors -Wno-documentation-unknown-command -Wno-unused-template -Wno-undef )
  else()
    add_definitions(-Wnoexcept)
  endif()

  if(APPLE)
    add_definitions(-Wno-sign-compare)
  endif()
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  option(USE_LIBCXX "Use clang's libcxx" TRUE)

  if(USE_LIBCXX)
    add_definitions(-stdlib=libc++)
    set(LINKER_FLAGS "${LINKER_FLAGS} ${CPP17_FLAG} -stdlib=libc++")
  else()
    set(LINKER_FLAGS "${LINKER_FLAGS} ${CPP17_FLAG}")
  endif()
elseif(CMAKE_COMPILER_IS_GNUCC)
  set(LINKER_FLAGS "${LINKER_FLAGS} ${CPP17_FLAG}")
endif()

add_definitions(-DNOMINMAX )
add_definitions(-DSIMTEC_USER_MODE -DWIN32_LEAN_AND_MEAN) 
				
add_executable(${ExeName}  WIN32 main.cpp
                                 ${DATASOURCES}
							)
							
source_group("DataSources" FILES ${DATASOURCES})

# add the binary tree to the search path for include files
# so that we will find HyLaAConfig.h
include_directories("${CMAKE_BINARY_DIR}")

# to ba able to do something like this: #include <application/hylaa.h>
include_directories("${CMAKE_SOURCE_DIR}")

add_subdirectory(examples)
add_subdirectory(tests)
target_compile_features(${ExeName} PUBLIC cxx_std_14)
target_link_libraries(${ExeName} CONAN_PKG::eigen)

set_target_properties(${ExeName} PROPERTIES LINK_FLAGS "/SUBSYSTEM:CONSOLE")
